#!/usr/bin/python
#
# Clever little hack to squash all commits that are repeats of previous commit msg into one commit
#
"""
Copyright 2014 Daniel B. Miller

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions
of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
reworking pyng as pythonic query generator for mongo
parse("foo == 'bar' or bus > 4")
> {'$or', [{'foo': 'bar'}, {'bus': {'$gt': 4}}]}
simplistic use:
db.test.find(parse("foo == 'bar' or bus > 4")
use directly in mongolib:
update("foo == 'bar' or bus > 4", fields=('foo', 'bar', 'bus'))
"""
import sys, os
PYBASE = os.path.abspath(os.path.dirname(__file__)) 
try:
    arg = sys.argv[1]
except:
    print "rebasit <commit>"
    print "#rebases squashing repeat comments"
    exit()

if "git-rebase-todo" in arg:
    #act as editor
    f = open(arg)
    o = []
    oldmsg = None
    for r in f.readlines():
        r = r.strip()
        if len(r) and r[:5] == 'pick ':
            r = r[5:]
            i = r.find(' ')
            commit = r[:i]
            message = r[i+1:]
            if message == oldmsg:
    #             print commit, "SQUASH"
                o.append("f %s %s" % (commit, message))
            else:
                o.append("pick %s %s" % (commit, message))
            print o[-1]
            oldmsg = message
    f.close()
    print "\nrebasit_edit done"
    
    f = open(arg, 'w')
    for r in o:
        f.write(r + "\n")
    f.close()
else:
    #invoke git rebase with me as editor
    os.environ['GIT_EDITOR'] = PYBASE + "/rebasit"
    cmd = "git rebase -i " + arg
    print cmd
    os.system(cmd)
